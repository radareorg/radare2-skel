/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package _/Users/pancake/prg/radare2-skel/r2-plugin-core-go/src */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
extern size_t _GoStringLen(_GoString_ s);
extern const char *_GoStringPtr(_GoString_ s);
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "core_hello_shim.go"




#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include <r_core.h>
#include <r_cons.h>

extern int goHelloCall(RCorePluginSession *cps, char *input);
extern int goHelloInit(RCorePluginSession *cps);
extern int goHelloFini(RCorePluginSession *cps);

static inline bool hello_call(RCorePluginSession *cps, const char *input) {
	return goHelloCall(cps, (char *)input) != 0;
}

static inline bool hello_init(RCorePluginSession *cps) {
	return goHelloInit(cps) != 0;
}

static inline bool hello_fini(RCorePluginSession *cps) {
	return goHelloFini(cps) != 0;
}

static inline void cps_set_handle(RCorePluginSession *cps, uintptr_t handle) {
	cps->data = (void *)handle;
}

static inline uintptr_t cps_get_handle(RCorePluginSession *cps) {
	return (uintptr_t)cps->data;
}

static inline RCons *cps_cons(RCorePluginSession *cps) {
	return cps && cps->core ? cps->core->cons : NULL;
}

RCorePlugin r_core_plugin_hello __attribute__((weak, used)) = {
	.meta = {
		.name = "core-hello",
		.desc = "hello world from an r2core plugin",
		.author = "pancake",
		.license = "MIT",
	},
	.call = hello_call,
	.init = hello_init,
	.fini = hello_fini,
};

#ifndef R2_PLUGIN_INCORE
RLibStruct radare_plugin __attribute__((weak, used)) = {
	.type = R_LIB_TYPE_CORE,
	.data = &r_core_plugin_hello,
	.version = R2_VERSION,
	.abiversion = R2_ABIVERSION
};
#endif

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#if !defined(__cplusplus) || _MSVC_LANG <= 201402L
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
#include <complex>
typedef std::complex<float> GoComplex64;
typedef std::complex<double> GoComplex128;
#endif
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern int goHelloCall(RCorePluginSession* cps, char* input);
extern int goHelloInit(RCorePluginSession* cps);
extern int goHelloFini(RCorePluginSession* cps);

#ifdef __cplusplus
}
#endif
